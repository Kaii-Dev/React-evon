{"ast":null,"code":"var _jsxFileName = \"/Users/khai/Library/Mobile Documents/com~apple~CloudDocs/Desktop/WORKSPACE/REACT-BIG/React-evon/my-app/src/context/authContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authContext = /*#__PURE__*/createContext(); //\n//This will be a React component that acts as a wrapper where we set up the Context, but also return that Context’s Provider for us to wrap our two other components in.\n\nfunction AuthProvider(props) {\n  _s();\n\n  const [user, setUser] = useState({\n    userId: 1,\n    fullname: \"khai le\",\n    email: \"lenguyenkhai@gmail.com\",\n    ava\n  });\n  const value = {\n    user,\n    setUser\n  };\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: value,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, this);\n}\n\n_s(AuthProvider, \"LJko4cmvReijnPm0N8BjhU/1uXI=\");\n\n_c = AuthProvider;\n\nfunction useAuth() {\n  _s2();\n\n  const context = useContext(authContext);\n\n  if (typeof context === \"undefined\") {\n    throw new Error(\"useAuth must be used within a AuthProvider!\");\n  }\n\n  return context;\n}\n\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { useAuth, AuthProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/khai/Library/Mobile Documents/com~apple~CloudDocs/Desktop/WORKSPACE/REACT-BIG/React-evon/my-app/src/context/authContext.js"],"names":["createContext","useContext","useState","authContext","AuthProvider","props","user","setUser","userId","fullname","email","ava","value","useAuth","context","Error"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;;AAEA,MAAMC,WAAW,gBAAGH,aAAa,EAAjC,C,CAAqC;AAErC;;AACA,SAASI,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC;AAC/BM,IAAAA,MAAM,EAAE,CADuB;AAE/BC,IAAAA,QAAQ,EAAE,SAFqB;AAG/BC,IAAAA,KAAK,EAAE,wBAHwB;AAI/BC,IAAAA;AAJ+B,GAAD,CAAhC;AAMA,QAAMC,KAAK,GAAG;AAAEN,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAd;AACA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEK,KAA7B;AAAA,OAAwCP;AAAxC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GATQD,Y;;KAAAA,Y;;AAWT,SAASS,OAAT,GAAmB;AAAA;;AACjB,QAAMC,OAAO,GAAGb,UAAU,CAACE,WAAD,CAA1B;;AACA,MAAI,OAAOW,OAAP,KAAmB,WAAvB,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;IANQD,O;;AAQT,SAASA,OAAT,EAAkBT,YAAlB","sourcesContent":["import { createContext, useContext, useState } from \"react\";\n\nconst authContext = createContext(); //\n\n//This will be a React component that acts as a wrapper where we set up the Context, but also return that Context’s Provider for us to wrap our two other components in.\nfunction AuthProvider(props) {\n  const [user, setUser] = useState({\n    userId: 1,\n    fullname: \"khai le\",\n    email: \"lenguyenkhai@gmail.com\",\n    ava\n  });\n  const value = { user, setUser };\n  return <authContext.Provider value={value} {...props}></authContext.Provider>;\n}\n\nfunction useAuth() {\n  const context = useContext(authContext);\n  if (typeof context === \"undefined\") {\n    throw new Error(\"useAuth must be used within a AuthProvider!\");\n  }\n  return context;\n}\n\nexport { useAuth, AuthProvider };\n"]},"metadata":{},"sourceType":"module"}